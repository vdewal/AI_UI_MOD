PSEUDO CODE FOR WithdrawAmount.w
=====================================

PURPOSE:
This is a SmartDialog procedure that allows users to withdraw money from a bank account, handling the withdrawal transaction and updating the account balance.

MAIN STRUCTURE:
1. Dialog Definition and Setup
2. Data Structures (Temp Tables)
3. UI Components (Buttons, Fields, Frames)
4. Event Handlers
5. Business Logic Procedures

DATA STRUCTURES:
- ttSavingAccountTxnHistory: Stores transaction history
  - Fields: AcctNum, TxnDate, TxnId, TxnDetail, WithdrawAmount, DepositAmount, Balance
- ttEmpty: Empty temp table with same structure as ttSavingAccountTxnHistory

UI COMPONENTS:
- Dialog: gDialog (SmartDialog)
- Frame: gDialog
- Buttons: 
  - Btn_OK: Process withdrawal transaction
  - Btn_Cancel: Cancel withdrawal operation
- Input Fields:
  - FILL-IN-FromAccount: Account number (read-only)
  - FILL-IN-TxnId: Transaction ID (read-only)
  - FILL-IN-WithdrawDate: Withdrawal date (read-only)
  - COMBO-BOX-Source: Withdrawal source (CASH, ATM, UPI)
  - FILL-IN-Amount: Withdrawal amount

MAIN PROCEDURES:

1. initializeObject():
   - Initialize UI components
   - Set default values
   - Set account number and transaction ID
   - Set current date
   - Configure form fields
   - Set up validation

2. Btn_OK (ON CHOOSE):
   - Validate withdrawal data
   - Create transaction record
   - Connect to server
   - Send withdrawal request to server
   - Handle server response
   - Close dialog on success

3. Btn_Cancel (ON CHOOSE):
   - Cancel withdrawal operation
   - Close dialog without saving

4. COMBO-BOX-Source (ON VALUE-CHANGED):
   - Validate source selection
   - Update form state
   - Enable/disable OK button

5. FILL-IN-Amount (ON VALUE-CHANGED):
   - Validate amount input
   - Check for valid numeric value
   - Update form state
   - Enable/disable OK button

6. validation():
   - Validate all form data
   - Check required fields are filled
   - Validate amount is positive
   - Validate source is selected
   - Enable/disable OK button based on validation

7. processWithdrawal():
   - Create transaction record
   - Set transaction details
   - Send to server for processing
   - Handle server response
   - Update account balance

8. enable_UI():
   - Display and enable all UI components
   - Set initial field values
   - Configure form properties

9. disable_UI():
   - Clean up UI components
   - Hide dialog

BUSINESS LOGIC:
- Withdrawal transaction process:
  1. User enters withdrawal amount and source
  2. System validates input data
  3. Transaction record created
  4. Data sent to server for processing
  5. Account balance updated
  6. Transaction recorded in history
  7. Success message displayed
  8. Dialog closed

- Validation rules:
  - Amount must be positive number
  - Source must be selected
  - Account number must be valid
  - Transaction ID must be unique

- Transaction handling:
  - Generate unique transaction ID
  - Record transaction date
  - Set transaction type as withdrawal
  - Update account balance
  - Log transaction in history

ERROR HANDLING:
- Try-catch blocks for server communication
- Validation error messages
- Amount validation errors
- Connection error handling
- Transaction processing errors

INTEGRATION:
- Uses ServerConnection class for server communication
- Uses ClientUtility class for data formatting
- Communicates with TestBankController.p on server
- Updates account balance
- Records transaction history
- JSON data exchange format

SPECIAL FEATURES:
- Real-time validation
- Transaction ID generation
- Account balance updating
- Transaction history recording
- Source selection validation
- Amount validation
