PSEUDO CODE FOR LoanAccountDetail.w
=====================================

PURPOSE:
This is a SmartWindow procedure that displays detailed information about loan accounts, including loan details, EMI information, and transaction history.

MAIN STRUCTURE:
1. Window Definition and Setup
2. Data Structures (Temp Tables)
3. UI Components (Buttons, Fields, Frames, Browse)
4. Event Handlers
5. Business Logic Procedures

DATA STRUCTURES:
- ttCustAccntDetails: Stores customer account information
  - Fields: AcctNum, AccntType, AccntSubType, TransferLimit, Balance, BranchCode, RateOfInterest, LoanDuration, TotalLoanAmount
- ttLoanEMIDetail: Stores EMI payment details
  - Fields: EmiId, AcctNum, EmiAmount, EmiDate, EmiStatus, PrincipalAmount, InterestAmount, RemainingBalance
- ttEmpty: Empty temp table with same structure as ttCustAccntDetails

UI COMPONENTS:
- Window: wWin (SmartWindow)
- Frame: fMain
- Buttons: 
  - BUTTON-PayEMI: Pay EMI amount
  - BUTTON-GenerateReport: Generate loan report
  - BUTTON-Close: Close window
- Display Fields:
  - FILL-IN-AcctNum: Account number (read-only)
  - FILL-IN-AccntType: Account type (read-only)
  - FILL-IN-Balance: Current balance (read-only)
  - FILL-IN-IFSC: IFSC code (read-only)
  - FILL-IN-RateOfInt: Rate of interest (read-only)
  - FILL-IN-TotalLoanAmt: Total loan amount (read-only)
  - FILL-IN-LoanDuration: Loan duration (read-only)
  - FILL-IN-EMIAmount: EMI amount (read-only)
  - FILL-IN-EMIDate: Next EMI date (read-only)
- Browse Widget:
  - BROWSE-LoanEMIDetail: Displays EMI payment history

MAIN PROCEDURES:

1. initializeObject():
   - Initialize UI components
   - Load loan account data
   - Load EMI payment history
   - Display account information
   - Configure browse widget

2. BUTTON-PayEMI (ON CHOOSE):
   - Open EMI payment dialog
   - Pass loan account details
   - Handle payment result
   - Refresh EMI history

3. BUTTON-GenerateReport (ON CHOOSE):
   - Open loan report dialog
   - Pass loan account details
   - Generate loan report

4. BUTTON-Close (ON CHOOSE):
   - Close loan account detail window
   - Return to calling procedure

5. loadLoanAccountData():
   - Connect to server
   - Retrieve loan account information
   - Populate form fields
   - Handle data loading errors

6. loadEMIHistory():
   - Connect to server
   - Retrieve EMI payment history
   - Populate browse widget
   - Handle data loading errors

7. displayLoanInfo():
   - Populate all display fields
   - Format data for display
   - Set field properties
   - Handle missing data

8. displayEMIHistory():
   - Clear existing browse data
   - Populate browse with EMI history
   - Format data for display
   - Set browse properties

9. calculateEMI():
   - Calculate EMI amount
   - Calculate next EMI date
   - Update EMI fields

10. refreshData():
    - Reload loan account data
    - Reload EMI history
    - Update display

11. enable_UI():
    - Display and enable all UI components
    - Set initial field values
    - Configure browse widget

12. disable_UI():
    - Clean up UI components
    - Delete window

BUSINESS LOGIC:
- Loan account display:
  1. Load loan account data from server
  2. Display loan information in read-only fields
  3. Load EMI payment history
  4. Display EMI history in browse widget
  5. Provide options for EMI payment and reporting

- EMI management:
  - Display EMI payment history
  - Calculate EMI amounts
  - Track payment status
  - Handle EMI payments

- Data handling:
  - Read-only display mode
  - Data formatting for display
  - Error handling for missing data
  - Data refresh capabilities

ERROR HANDLING:
- Try-catch blocks for server communication
- Data loading error handling
- EMI calculation errors
- Connection error handling
- Data validation errors

INTEGRATION:
- Uses ServerConnection class for server communication
- Uses ClientUtility class for data formatting
- Communicates with TestBankController.p on server
- Integrates with EMI payment procedures
- Integrates with reporting procedures
- JSON data exchange format

SPECIAL FEATURES:
- Read-only display mode
- EMI payment history display
- EMI calculation
- Loan report generation
- Data refresh capabilities
- Integration with payment and reporting systems
