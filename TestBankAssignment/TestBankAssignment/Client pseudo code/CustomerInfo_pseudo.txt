PSEUDO CODE FOR CustomerInfo.w
=====================================

PURPOSE:
This is a SmartWindow procedure that displays detailed customer information and provides options to view, edit, or manage customer accounts in the banking system.

MAIN STRUCTURE:
1. Window Definition and Setup
2. Data Structures (Temp Tables)
3. UI Components (Buttons, Fields, Frames, Browse)
4. Event Handlers
5. Business Logic Procedures

DATA STRUCTURES:
- ttCustomer: Stores customer information
  - Fields: CustId, FirstName, LastName, Email, Phone, Address, City, State, Country, PostalCode, DateOfBirth, Gender, Occupation, AnnualIncome
- ttCustAccntDetails: Stores customer account information
  - Fields: AcctNum, AccntType, AccntSubType, TransferLimit, Balance, BranchCode, RateOfInterest, LoanDuration, TotalLoanAmount
- ttEmpty: Empty temp table with same structure as ttCustomer

UI COMPONENTS:
- Window: wWin (SmartWindow)
- Frame: fMain
- Buttons: 
  - BUTTON-Edit: Edit customer information
  - BUTTON-AddAccount: Add new account for customer
  - BUTTON-ViewAccounts: View customer accounts
  - BUTTON-Delete: Delete customer
  - BUTTON-Close: Close window
- Display Fields:
  - FILL-IN-FirstName: Customer first name (read-only)
  - FILL-IN-LastName: Customer last name (read-only)
  - FILL-IN-Email: Customer email (read-only)
  - FILL-IN-Phone: Customer phone (read-only)
  - FILL-IN-Address: Customer address (read-only)
  - FILL-IN-City: Customer city (read-only)
  - FILL-IN-State: Customer state (read-only)
  - FILL-IN-Country: Customer country (read-only)
  - FILL-IN-PostalCode: Customer postal code (read-only)
  - FILL-IN-DateOfBirth: Customer date of birth (read-only)
  - FILL-IN-Gender: Customer gender (read-only)
  - FILL-IN-Occupation: Customer occupation (read-only)
  - FILL-IN-AnnualIncome: Customer annual income (read-only)

MAIN PROCEDURES:

1. initializeObject():
   - Initialize UI components
   - Load customer data from server
   - Display customer information
   - Set up form for display mode
   - Configure buttons based on permissions

2. BUTTON-Edit (ON CHOOSE):
   - Open customer edit dialog
   - Pass current customer data
   - Handle edit result
   - Refresh customer information

3. BUTTON-AddAccount (ON CHOOSE):
   - Open add account dialog
   - Pass customer ID
   - Handle account creation result
   - Refresh account information

4. BUTTON-ViewAccounts (ON CHOOSE):
   - Open customer accounts window
   - Pass customer ID
   - Display all customer accounts

5. BUTTON-Delete (ON CHOOSE):
   - Confirm deletion with user
   - Delete customer from system
   - Handle deletion result
   - Close window on success

6. BUTTON-Close (ON CHOOSE):
   - Close customer info window
   - Return to calling procedure

7. loadCustomerData():
   - Connect to server
   - Retrieve customer information
   - Populate form fields
   - Handle data loading errors

8. displayCustomerInfo():
   - Populate all display fields
   - Format data for display
   - Set field properties
   - Handle missing data

9. refreshCustomerData():
   - Reload customer data from server
   - Update display fields
   - Handle refresh errors

10. validateCustomerData():
    - Check if customer data is complete
    - Validate data formats
    - Return validation result

11. enable_UI():
    - Display and enable all UI components
    - Set initial field values
    - Configure buttons

12. disable_UI():
    - Clean up UI components
    - Delete window

BUSINESS LOGIC:
- Customer information display:
  1. Load customer data from server
  2. Display information in read-only fields
  3. Provide options for customer management
  4. Handle data refresh and updates

- Customer management operations:
  - Edit customer information
  - Add new accounts
  - View existing accounts
  - Delete customer (with confirmation)

- Data handling:
  - Read-only display mode
  - Data formatting for display
  - Error handling for missing data
  - Data refresh capabilities

ERROR HANDLING:
- Try-catch blocks for server communication
- Data loading error handling
- Customer deletion confirmation
- Permission checking
- Data validation errors

INTEGRATION:
- Uses ServerConnection class for server communication
- Uses ClientUtility class for data formatting
- Communicates with TestBankController.p on server
- Integrates with other customer management procedures
- JSON data exchange format

SPECIAL FEATURES:
- Read-only display mode
- Customer management options
- Data refresh capabilities
- Permission-based button enabling
- Confirmation dialogs for destructive operations
- Integration with account management
