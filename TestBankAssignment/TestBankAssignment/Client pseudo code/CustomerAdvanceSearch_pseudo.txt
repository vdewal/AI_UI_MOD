PSEUDO CODE FOR CustomerAdvanceSearch.w
=====================================

PURPOSE:
This is a SmartWindow procedure that provides advanced search functionality for customers in the banking system, allowing users to search by multiple criteria and view results in a browse widget.

MAIN STRUCTURE:
1. Window Definition and Setup
2. Data Structures (Temp Tables)
3. UI Components (Buttons, Fields, Frames, Browse)
4. Event Handlers
5. Business Logic Procedures

DATA STRUCTURES:
- ttCustomer: Stores customer search results
  - Fields: CustId, FirstName, LastName, Email, Phone, Address, City, State, Country, PostalCode, DateOfBirth, Gender, Occupation, AnnualIncome
- ttEmpty: Empty temp table with same structure as ttCustomer

UI COMPONENTS:
- Window: wWin (SmartWindow)
- Frame: fMain
- Buttons: 
  - BUTTON-Search: Executes search
  - BUTTON-Clear: Clears search criteria
  - BUTTON-Select: Selects customer from results
  - BUTTON-Cancel: Cancels search
- Input Fields:
  - FILL-IN-FirstName: Search by first name
  - FILL-IN-LastName: Search by last name
  - FILL-IN-Email: Search by email
  - FILL-IN-Phone: Search by phone
  - COMBO-BOX-City: Search by city
  - COMBO-BOX-State: Search by state
  - COMBO-BOX-Country: Search by country
  - FILL-IN-PostalCode: Search by postal code
  - FILL-IN-DateOfBirth: Search by date of birth
  - RADIO-SET-Gender: Search by gender
  - FILL-IN-Occupation: Search by occupation
  - FILL-IN-AnnualIncome: Search by annual income range
- Browse Widget:
  - BROWSE-CustomerResults: Displays search results

MAIN PROCEDURES:

1. initializeObject():
   - Initialize UI components
   - Set default values
   - Load city, state, country lists from server
   - Configure browse widget
   - Set up search form

2. BUTTON-Search (ON CHOOSE):
   - Collect search criteria from form
   - Validate search parameters
   - Build WHERE clause for search
   - Connect to server
   - Send search request to server
   - Display results in browse widget
   - Handle search errors

3. BUTTON-Clear (ON CHOOSE):
   - Clear all search criteria fields
   - Reset form to default values
   - Clear browse widget
   - Reset search state

4. BUTTON-Select (ON CHOOSE):
   - Get selected customer from browse
   - Return customer data to calling procedure
   - Close search window

5. BUTTON-Cancel (ON CHOOSE):
   - Close search window without selection
   - Return empty result

6. BROWSE-CustomerResults (ON ROW-SELECT):
   - Highlight selected row
   - Enable Select button
   - Store selected customer data

7. buildSearchCriteria():
   - Collect all search criteria from form
   - Build WHERE clause for database query
   - Handle partial matches and wildcards
   - Return formatted search criteria

8. executeSearch():
   - Connect to server
   - Send search request with criteria
   - Receive search results
   - Populate browse widget
   - Handle search errors

9. displaySearchResults():
   - Clear existing browse data
   - Populate browse with search results
   - Format data for display
   - Set browse properties

10. validateSearchCriteria():
    - Check if at least one search criterion is provided
    - Validate data formats
    - Check for valid date ranges
    - Return validation result

11. enable_UI():
    - Display and enable all UI components
    - Set initial field values
    - Load dropdown data
    - Configure browse widget

12. disable_UI():
    - Clean up UI components
    - Delete window

BUSINESS LOGIC:
- Search process:
  1. User enters search criteria
  2. System validates criteria
  3. Search request sent to server
  4. Results displayed in browse widget
  5. User can select customer from results
  6. Selected customer data returned to calling procedure

- Search criteria handling:
  - Partial name matching
  - Date range searching
  - Multiple criteria combination
  - Case-insensitive searching
  - Wildcard support

- Result display:
  - Paginated results
  - Sortable columns
  - Row selection
  - Data formatting

ERROR HANDLING:
- Try-catch blocks for server communication
- Search validation errors
- Connection error handling
- Data format validation
- Empty result handling

INTEGRATION:
- Uses ServerConnection class for server communication
- Uses ClientUtility class for data formatting
- Communicates with TestBankController.p on server
- JSON data exchange format
- Returns data to calling procedures

SPECIAL FEATURES:
- Advanced search with multiple criteria
- Real-time search validation
- Browse widget for results display
- Row selection and data return
- Search criteria clearing
- Partial matching support
