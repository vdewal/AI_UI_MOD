PSEUDO CODE FOR gDialog-DeleteAccount.w
=====================================

PURPOSE:
This is a SmartDialog procedure that provides a confirmation dialog for deleting bank accounts, ensuring proper validation and confirmation before account deletion.

MAIN STRUCTURE:
1. Dialog Definition and Setup
2. Data Structures (Temp Tables)
3. UI Components (Buttons, Fields, Frames)
4. Event Handlers
5. Business Logic Procedures

DATA STRUCTURES:
- ttCustAccntDetails: Stores account information for deletion
  - Fields: AcctNum, AccntType, AccntSubType, TransferLimit, Balance, BranchCode, RateOfInterest, LoanDuration, TotalLoanAmount
- ttEmpty: Empty temp table with same structure as ttCustAccntDetails

UI COMPONENTS:
- Dialog: gDialog (SmartDialog)
- Frame: gDialog
- Buttons: 
  - Btn_Delete: Confirm account deletion
  - Btn_Cancel: Cancel deletion operation
- Display Fields:
  - FILL-IN-AcctNum: Account number (read-only)
  - FILL-IN-AccntType: Account type (read-only)
  - FILL-IN-AccntSubType: Account sub-type (read-only)
  - FILL-IN-Balance: Account balance (read-only)
  - FILL-IN-BranchCode: Branch code (read-only)
  - FILL-IN-TransferLimit: Transfer limit (read-only)
  - FILL-IN-RateOfInt: Rate of interest (read-only)
  - FILL-IN-TotalLoanAmt: Total loan amount (read-only)
  - FILL-IN-LoanDuration: Loan duration (read-only)

MAIN PROCEDURES:

1. initializeObject():
   - Initialize UI components
   - Load account data for display
   - Set up confirmation dialog
   - Configure form fields
   - Set up validation

2. Btn_Delete (ON CHOOSE):
   - Confirm deletion with user
   - Validate account can be deleted
   - Connect to server
   - Send deletion request to server
   - Handle server response
   - Close dialog on success

3. Btn_Cancel (ON CHOOSE):
   - Cancel deletion operation
   - Close dialog without deleting

4. loadAccountData():
   - Connect to server
   - Retrieve account information
   - Populate form fields
   - Handle data loading errors

5. displayAccountInfo():
   - Populate all display fields
   - Format data for display
   - Set field properties
   - Handle missing data

6. validateDeletion():
   - Check if account can be deleted
   - Validate account balance is zero
   - Check for pending transactions
   - Return validation result

7. confirmDeletion():
   - Show confirmation message
   - Get user confirmation
   - Return confirmation result

8. processDeletion():
   - Send deletion request to server
   - Handle server response
   - Update account status
   - Log deletion activity

9. enable_UI():
   - Display and enable all UI components
   - Set initial field values
   - Configure form properties

10. disable_UI():
    - Clean up UI components
    - Hide dialog

BUSINESS LOGIC:
- Account deletion process:
  1. Load account information for display
  2. Validate account can be deleted
  3. Show confirmation dialog
  4. Get user confirmation
  5. Send deletion request to server
  6. Handle server response
  7. Close dialog on success

- Deletion validation:
  - Account balance must be zero
  - No pending transactions
  - Account must be active
  - Proper permissions required

- Confirmation process:
  - Display account details
  - Show warning message
  - Require explicit confirmation
  - Handle cancellation

ERROR HANDLING:
- Try-catch blocks for server communication
- Deletion validation errors
- Confirmation handling
- Connection error handling
- Data loading errors

INTEGRATION:
- Uses ServerConnection class for server communication
- Uses ClientUtility class for data formatting
- Communicates with TestBankController.p on server
- Integrates with account management procedures
- JSON data exchange format

SPECIAL FEATURES:
- Confirmation dialog
- Account validation
- Data display
- Deletion confirmation
- Error handling
- Integration with account management
